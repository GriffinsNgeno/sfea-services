imageCredentials: { enabled: false, registry: "", username: "", password: "" }
nameOverride: "${DRONE_REPO_NAME}-${DRONE_COMMIT_BRANCH}"
fullNameOverride: "${DRONE_REPO_NAME}-${DRONE_COMMIT_BRANCH}"
DOCKER: "${DOCKER}"
service: { type: ClusterIP, port: 80 }
ingress:
  enabled: true
  tlsEnabled: true
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    certmanager.k8s.io/acme-challenge-type: http01
    kubernetes.io/ingress.class: nginx
  hosts:
    - host: main-service-${DRONE_COMMIT_BRANCH}-nginx.git.i-sphere.ru
      paths:
        - /
  tls:
    - hosts:
        - main-service-${DRONE_COMMIT_BRANCH}-nginx.git.i-sphere.ru
      secretName: main-service-${DRONE_COMMIT_BRANCH}-nginx.git.i-sphere.ru
securityContext: { capabilities: { drop: [ FOWNER, KILL, MKNOD, SETGID, SETUID ] } }
podAnnotations: { }
podSecurityContext: { }
nodeSelector:
  "kubernetes.io/hostname": msk-worker-01
tolerations:
  - key: main-service
    operator: Equal
    value: "yes"
    effect: NoSchedule
persistence:
  xml:
    enabled: true
    accessMode: ReadWriteOnce
    storageClassName: local-path
    size: 200Gi
  bulk:
    enabled: true
    accessMode: ReadWriteOnce
    storageClassName: local-path
    size: 50Gi
  logs:
    enabled: true
    accessMode: ReadWriteOnce
    storageClassName: local-path
    size: 50Gi
serviceAccount:
  create: true
  annotations: { }
  createRole: true
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 1
          preference:
            matchExpressions:
              - key: kubernetes.io/hostname
                operator: Exists

autoScaling:
  minReplicaCount: 1
  maxReplicaCount: 9
  cpuUtilizationPercentage: 70
  memoryUtilizationPercentage: 70

php_fpm:
  service: { ports: { tcp: 9000, status: 9001 } }
  image:
    {
      repository: "${CI_REGISTRY_IMAGE}",
      pullPolicy: Always,
      tag: "${DRONE_BRANCH}",
    }
  resources:
#    limits: { cpu: 1500m, memory: 4Gi }
    limits: { cpu: 100m, memory: 512Mi }
#    requests: { cpu: 1200m, memory: 3Gi }
    requests: { cpu: 50m, memory: 256Mi }

nginx:
  service: { ports: { http: 80 } }
  image:
    {
      repository: "${CI_REGISTRY_IMAGE}-nginx",
      pullPolicy: Always,
      tag: "${DRONE_BRANCH}",
    }
  resources:
    limits: { cpu: 200m, memory: 64Mi }
    requests: { cpu: 100m, memory: 32Mi }

daemon_for_to_bulk:
  image:
    {
      repository: "${CI_REGISTRY_IMAGE}",
      pullPolicy: Always,
      tag: "${DRONE_BRANCH}",
    }
  resources:
    #    limits: { cpu: 1500m, memory: 4Gi }
    limits: { cpu: 100m, memory: 256Mi }
    #    requests: { cpu: 1200m, memory: 3Gi }
    requests: { cpu: 50m, memory: 128Mi }

js_for_to_bulk:
  image:
    {
      repository: "${CI_REGISTRY_IMAGE}-nodejs",
      pullPolicy: Always,
      tag: "${DRONE_BRANCH}",
    }
  resources:
    limits: { cpu: 30m, memory: 32Mi }
    requests: { cpu: 20m, memory: 16Mi }