<?php

// RUN apk add libyaml && pecl install yaml

main();

function main()
{
    $discoveredIPs = getDiscoveredServers();

    $input = yaml_parse(file_get_contents('conf/servers.yaml'));
    $output = [];

    foreach ($input as $region) {
        if (isset($region['enabled']) && !$region['enabled']) {
            fprintf(STDERR, "region is not enabled: %s\n", $region['name']);
            continue;
        }

        foreach ($region['children'] ?? [] as $machine) {
            if (isset($machine['enabled']) && !$machine['enabled']) {
                fprintf(STDERR, "machine is not enabled: %s\n", $machine['name']);
                continue;
            }

            foreach ($machine['children'] ?? [] as $server) {
                if (!isset($server['ip'])) {
                    fprintf(STDERR, "cannot use server: %s: no ip\n", $server['name']);
                    continue;
                }

                if (isset($server['enabled']) && !$server['enabled']) {
                    fprintf(STDERR, "server is not enabled: %s\n", $server['name']);
                    continue;
                }

                if (isset($discoveredIPs[$server['ip']])) {
                    fprintf(STDERR, "discovered managed server: %s, skipping\n", $server['ip']);
                    continue;
                }

                $labels = ['instance' => $server['name']];

                if (isset($region['name'])) {
                    $labels['region'] = $region['name'];
                }

                if (isset($machine['name'])) {
                    $labels['child_of'] = $machine['name'];
                }

                if (isset($server['type'])) {
                    $labels['server_type'] = $server['type'];
                }

                $output[] = [
                    'labels' => $labels,
                    'targets' => [
                        sprintf('%s:9100', $server['ip']),
                    ],
                ];
            }
        }
    }

    $yaml = yaml_emit($output, YAML_UTF8_ENCODING);

    updateConfigFile($yaml);
}

function getDiscoveredServers(): array
{
    return []; // @todo для сохранения лейблов нод

    $ch = curl_init('http://prometheus-kube-prometheus-prometheus.prometheus.svc.cluster.local:9090/api/v1/targets?scrapePool=serviceMonitor/prometheus/prometheus-node-exporter/0');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    $managedServers = json_decode(curl_exec($ch), true);
    curl_close($ch);

    $discoveredIPs = [];
    foreach ($managedServers['data']['activeTargets'] as $activeTarget) {
        $discoveredIPs[explode(':', $activeTarget['discoveredLabels']['__address__'])[0]] = 1;
    }

    return $discoveredIPs;
}

function updateConfigFile(string $yaml): void
{
    $config = file_get_contents('values-kube-prometheus.yaml');
    $config = preg_replace_callback('~(?<=###> @autogenerated:servers).+(?=###< @autogenerated:servers)~ms', function ($matches) use ($yaml): string {
        $sb = [];
        $lines = explode(PHP_EOL, $yaml);
        foreach ($lines as $line) {
            if (in_array($line, ['---', '...'])) {
                continue;
            }
            $sb[] = sprintf('%s%s', str_repeat(' ', 12), $line);
        }
        return PHP_EOL . implode(PHP_EOL, $sb) . PHP_EOL . str_repeat(' ', 12);
    }, $config);
    file_put_contents('values-kube-prometheus.yaml', $config);
}