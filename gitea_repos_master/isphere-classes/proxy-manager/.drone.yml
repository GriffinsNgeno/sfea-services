name: drone
kind: pipeline
type: kubernetes
node_selector: { development: "yes" }

global-variables:
  - master: &master master
  - dev: &dev dev
  - on_pr_open_dev: &on_pr_open_dev
      event: [ pull_request ]
      branch: [ *dev ]
  - on_push_master: &on_push_master
      event: [ push ]
      branch: [ *master ]
  - on_push_dev: &on_push_dev
      event: [ push ]
      branch: [ *dev ]
  - on_push_master_or_dev: &on_push_master_or_dev
      event: [ push ]
      branch: [ *master, *dev ]
  - use_environment: &use_environment
      GIT_TOKEN: { from_secret: GIT_TOKEN }
      GIT_USER: { from_secret: GIT_USER }
      GIT_HTTP_DOMAIN: { from_secret: GIT_HTTP_DOMAIN }
      GIT_HTTP_URL: { from_secret: GIT_HTTP_URL }
      GIT_DOMAIN_WITH_PROTOCOL: { from_secret: GIT_DOMAIN_WITH_PROTOCOL }
      GIT_HTTP_URL_WITH_CREDENTIALS: { from_secret: GIT_HTTP_URL_WITH_CREDENTIALS }
  - linter_image: &linter_image gitea-http.gitea.svc.cluster.local/isphere-images/python-linter:1.2-3.11
  - unittest_image: &unittest_image gitea-http.gitea.svc.cluster.local/isphere-images/python:3.11-slim-buster
  - alpine_image: &alpine_image gitea-http.gitea.svc.cluster.local/isphere-images/alpine-auto-pr:1.0-3.19
  - python_package: &python_package gitea-http.gitea.svc.cluster.local/isphere-images/python-package:1.0-3.11
  - docs_image: &docs_image gitea-http.gitea.svc.cluster.local/isphere-images/python-sphinx-docs:1.3-3.11

steps:
- name: lint-black
  image: *linter_image
  when: *on_pr_open_dev
  commands:
    - git checkout -b $DRONE_SOURCE_BRANCH
    - isort .; black .
    - |
      if [ $(git status --porcelain | wc -l) != "0" ]; then 
        git commit -am "refactor: lint autofixes"
        git push --set-upstream origin $DRONE_SOURCE_BRANCH
        exit 1
      else
        echo "Nothing to commit. Ok"
      fi          


- name: lint-mypy
  image: *linter_image
  when: *on_pr_open_dev
  commands:
    - mypy .

- name: tartufo-scan
  image: *linter_image
  when: *on_pr_open_dev
  commands:
    - tartufo scan-local-repo .

- name: unit-tests
  image: *unittest_image
  when: *on_pr_open_dev
  environment: *use_environment
  depends_on: [ lint-mypy, tartufo-scan, lint-black ]
  commands:
    - |
      if [ -d "tests/" ]
      then 
        echo "Tests dir exists"
      else
        echo "No tests found"
        exit 0
      fi
    - pip install pipenv==2022.1.8
    - pipenv install --dev
    - pipenv run python -m unittest discover -s tests/

- name: auto-pr
  image: *alpine_image
  when: *on_push_dev
  environment: *use_environment
  commands:
    - apk add --no-cache curl jq
    - REPO_PR_URL_GET=`echo $GIT_HTTP_URL_WITH_CREDENTIALS/api/v1/repos/$DRONE_REPO/pulls?state=open`
    - REPO_PR_URL_CREATE=`echo $GIT_HTTP_URL_WITH_CREDENTIALS/api/v1/repos/$DRONE_REPO/pulls`
    - PR_DEV=`curl -s $REPO_PR_URL_GET | jq -r '.[].base.label'`
    - | 
      if [ "$PR_DEV" != "master" ]; then
        curl -X 'POST' `echo $REPO_PR_URL_CREATE` \
        -H 'Content-Type: application/json' \
        -d '{"base":"'`echo $DRONE_REPO_BRANCH`'","head":"dev","title":"dev to '`echo $DRONE_REPO_BRANCH`'"}'
      else
        echo "PR already exists."
      fi

- name: build-package
  image: *python_package
  when: *on_push_master_or_dev
  environment: *use_environment
  commands:
    - PACKAGE_ORG=`echo $DRONE_GIT_HTTP_URL | cut -d'/' -f4`
    - PACKAGE_URL=`echo $GIT_DOMAIN_WITH_PROTOCOL/api/packages/$PACKAGE_ORG/pypi`
    - VERSION_PREFIX=`if echo ${DRONE_BRANCH} | grep -q 'dev'; then echo 'dev_'; else echo ''; fi`
    - VERSION_NUMBER=`if echo ${DRONE_BRANCH} | grep -q 'dev'; then echo 'patch'; else echo 'minor'; fi`
    - |
      git reset --hard HEAD
      pipenv run pipenv_to_requirements
      bumpversion `echo $VERSION_NUMBER --tag-name $VERSION_PREFIX_v{new_version}` --message "bump: {current_version} â†’ {new_version} [CI SKIP]"
      python3 -m build
      twine upload --repository-url `echo $PACKAGE_URL` `find ./dist/ -path "**.tar.gz"` --verbose -u `echo $GIT_USER` -p `echo $GIT_TOKEN`
      git push --set-upstream origin $DRONE_BRANCH            

- name: auto-docs
  image: *docs_image
  depends_on: [ build-package ]
  when: *on_push_master
  environment:
    DOCS_DIR: "./docs"
    BUILD_HTML: "./docs/build_html"
    BUILD_MARKDOWN: "./docs/build_markdown"
    BUILD_PDF: "./docs/build_pdf"
    CURRENT_PROJECT: "${DRONE_REPO_NAME}"
    REPO_NAME: "isphere-docs"
    <<: *use_environment
  commands:
    - REPO_URL=`echo $GIT_HTTP_URL/isphere-secrets/$REPO_NAME`
    - REPO_PATH=`echo $REPO_NAME/packages/Python/$CURRENT_PROJECT/auto`
    - DOCS_CONF=`echo $GIT_HTTP_URL_WITH_CREDENTIALS/isphere-secrets/docs-ci-supplementary/raw/branch/master/conf.py`
    - |
      pipenv install --dev
    - |
      mkdir docs
      curl -o docs/conf.py `echo $DOCS_CONF`
    - |
      pipenv run sphinx-apidoc -o `echo $DOCS_DIR` .
      pipenv run sphinx-build -b singlehtml `echo $DOCS_DIR` `echo $BUILD_HTML`
      pipenv run sphinx-build -b markdown `echo $DOCS_DIR` `echo $BUILD_MARKDOWN`
    - | 
      echo '<style>.wy-grid-for-nav{position: static !important}</style>' >> `echo $BUILD_HTML/modules.html`
      mkdir -p `echo $BUILD_PDF`
      pipenv run weasyprint `echo $BUILD_HTML/modules.html $BUILD_PDF/doc.pdf`
    - git clone `echo $REPO_URL`
    - |
      mkdir -p `echo $REPO_PATH`
      cp `echo $BUILD_MARKDOWN/*.md $REPO_PATH`
      cp `echo $BUILD_PDF/*.pdf $REPO_PATH`
      cd `echo $REPO_NAME`
    - |
      git add .
      git commit -am "docs: auto docs for `echo $CURRENT_PROJECT`"
      git push --set-upstream origin master       

trigger:
  event: [ pull_request, push ]
  branch: [ *master, *dev ]

---
kind: secret
name: GIT_TOKEN
get: { path: settings-kube, name: GIT_TOKEN }

---
kind: secret
name: GIT_USER
get: { path: settings-kube, name: GIT_USER }

---
kind: secret
name: GIT_HTTP_DOMAIN
get: { path: settings-kube, name: GIT_HTTP_DOMAIN }

---
kind: secret
name: GIT_HTTP_URL
get: { path: settings-kube, name: GIT_HTTP_URL }

---
kind: secret
name: GIT_DOMAIN_WITH_PROTOCOL
get: { path: settings-kube, name: GIT_HTTP_URL }

---
kind: secret
name: GIT_HTTP_URL_WITH_CREDENTIALS
get: { path: settings-kube, name: GIT_HTTP_URL_WITH_CREDENTIALS }
