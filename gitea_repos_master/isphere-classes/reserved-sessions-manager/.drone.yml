name: drone
kind: pipeline
type: kubernetes
pull: if-not-exists
load: none


global-variables:
  python_image: &python_image python:3.10
  ubuntu_image: &ubuntu_image ubuntu:22.04
  environment: &ci_environment
    GIT_TOKEN:
      from_secret: GIT_TOKEN
    GIT_USER:
      from_secret: GIT_USER

steps:
- name: black-run
  image: *python_image
  volumes:
    - name: black-cache
      path: /drone/src/
  commands:
    - git checkout -b $DRONE_SOURCE_BRANCH
    - pip install -qq black
    - black reserved_sessions_manager *.py
  when:
    event:
      - pull_request
    branch:
      - master
      - dev

- name: black-check
  image: *python_image
  depends_on:
    - black-run
  volumes:
    - name: black-cache
      path: /drone/src/
  commands:
    - git status
    - |
      if [ $(git status --porcelain | wc -l) -eq "0" ]; then 
        echo "No changes detected. Ok"; 
      else 
        echo "Changes detected. Refactor your code and run again"
        exit 1; 
      fi
  when:
    event:
      - pull_request
    branch:
      - master
      - dev

- name: black-push
  image: *python_image
  depends_on:
    - black-run
  volumes:
    - name: black-cache
      path: /drone/src/
  commands:
    - git status
    - |
      if [ $(git status --porcelain | wc -l) != "0" ]; then 
        git commit -am "refactor: black autofixes"
        git push --set-upstream origin $DRONE_SOURCE_BRANCH
      else
        echo "Nothing to commit. Ok"
      fi
  when:
    event:
      - pull_request
    branch:
      - master
      - dev

- name: build-package
  image: python:3.10
  commands:
    - LAST_COMMIT=`git show-branch --no-name HEAD`
    - | 
      if echo "$LAST_COMMIT" | grep -q "Bump version:"; then 
        echo "Last commit with build. Skip"; 
        exit 0; 
      else 
        echo "New build"; 
      fi
    - pip install pipenv bumpversion
    - pipenv install --dev
    - VERSION_PREFIX=`if echo ${DRONE_BRANCH} | grep -q 'dev'; then echo 'dev_'; else echo ''; fi`
    - VERSION_NUMBER=`if echo ${DRONE_BRANCH} | grep -q 'dev'; then echo 'minor'; else echo 'major'; fi`
    - GIT_TOKEN=`echo $GIT_TOKEN`
    - GIT_USER=`echo $GIT_USER`
    - pipenv run bumpversion `echo $VERSION_NUMBER --tag-name $VERSION_PREFIX_v{new_version}`
    - pipenv run python3 -m build
    - pipenv run python3 -m twine upload --repository $DRONE_REPO_NAME `find ./dist/ -path "**.tar.gz"` --config-file ./.pypirc --verbose -u `echo $GIT_USER` -p `echo $GIT_TOKEN`
    - pipenv run git push --set-upstream origin $DRONE_BRANCH
  environment:
    <<: *ci_environment
  when:
    event:
      - push
    branch:
      - dev
      - master


- name: auto-pr
  image: *ubuntu_image
  commands:
    - apt-get update
    - apt-get -qq -y install curl jq
    - REPO_PR_URL_GET=`echo https://git.i-sphere.ru/api/v1/repos/$DRONE_REPO/pulls?state=open\&access_token=$GIT_TOKEN`
    - REPO_PR_URL_CREATE=`echo https://git.i-sphere.ru/api/v1/repos/$DRONE_REPO/pulls?access_token=$GIT_TOKEN`
    - PR_DEV=`curl -s $REPO_PR_URL_GET | jq -r '.[].base.label'`
    - | 
      if [ "$PR_DEV" != "master" ]; then
        curl -X 'POST' `echo $REPO_PR_URL_CREATE` \
        -H 'Content-Type: application/json' \
        -d '{"assignees":["kovinevmv","ar"],"base":"'`echo $DRONE_REPO_BRANCH`'","head":"dev","title":"dev to '`echo $DRONE_REPO_BRANCH`'"}'
      else
        echo "PR already exists."
      fi
  environment:
    <<: *ci_environment
  when:
    event:
      - push
    branch:
      - dev

- name: unit-tests
  image: *python_image
  commands:
    - |
      if [ -d "tests/" ]
      then 
        echo "Tests dir exists"
      else
        echo "No tests found"
        exit 0
      fi
    - pip install pipenv==2022.1.8
    - pipenv install --dev
    - pipenv run python -m unittest discover -s tests/
  environment:
    <<: *ci_environment
  when:
    event:
      - pull_request
    branch:
      - master
      - dev

volumes:
- name: black-cache
  temp: {}

trigger:
  event:
    - pull_request
    - push
  branch:
    - master
    - dev

---
kind: secret
name: GIT_TOKEN
get:
  path: settings-kube
  name: GIT_TOKEN

---
kind: secret
name: GIT_USER
get:
  path: settings-kube
  name: GIT_USER
